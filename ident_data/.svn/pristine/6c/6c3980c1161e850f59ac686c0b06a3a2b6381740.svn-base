clear all; clc
cd('/home/lex/Documents/Matlab_Files/ident_data/UWGN')

raw_data = load('uwgn_ident.mat');
raw_data = raw_data.uwgn;

input = load('inputUGWN.csv');
output = load('outputUGWN.csv');

srs = iddata(input, output(1:length(input)), .167/3);

get(srs)

%give names to the input and output channels and Time units

srs.InputName  = 'Current';
srs.OutputName = 'Fused Measurement';
srs.TimeUnit   = 'seconds';
srs.InputUnit  = 'mA';
srs.OutputUnit = 'mm';
srs.ExperimentName = 'Uniform Gaussian White Noise Expt';

% split dataset in 60:40 ratio for estimation
[m,n] = size(srs)
srstest = srs(1:0.6*m);
srstrain = srs(1:0.4*m);
%%
time = srs.Ts * m;              %actual time for id expt
ptest = plot(srstest(4000:4500)), 

clf
ptrain = plot(srstrain(600:1100)),
%{
%% Note. Do not detrend data. Input is already white.
%data is not zero mean.% So remove constant levels and make the data zero mean.
%srs = detrend(srs);

srstest = srs(1:0.6*m);
srstrain = srs(1:0.4*m);

plot(srstest(4000:4500));
%}

%% Estimating Nonparametric Models
clf
%non-param fir model
srsi = impulseest(srs,[],'negative',impulseestOptions('RegulKernel','SE'));   
srsii = impulseest(srs);

% Show the 99.7% confidence bands
showConfidence(impulseplot(srsi), 3)

fprintf('Press spacebar key to continue'),
pause, clf;

showConfidence(impulseplot(srsii), 3)

% there is a single-sample delay (dead-time) before the output responds to
% input or an 18-sample delay if we use the negative impulse function.
% there is probably a high-degree of feedback in the data. Future outputs
% are possibly coupled w/past inputs. We estimate the delay.
delay = delayest(srs)

%and find the probability of feedback with 
 
fprintf('Press spacebar key to continue'),
pause,

feedback = feedback(srs)
%a 97% feedback tells us there is high feedback in the data


%The sample time of the data is 0.0556 second, while the process time
% constants might be much slower. We may detect some rather high
% frequencies in the output. In order to affirm this, let us first compute
% the input and output spectral analysis estimate: 
sy = spa(srs(:,1,[]));
su = spa(srs(:,[],1));

 
fprintf('Press spacebar key to continue'),
pause,

clf
spectrum(sy,su)
legend({'Output','Input'})
grid on


%the input has very little relative energy above 10 rad/sec while
% the output contains relatively larger values above that frequency. There
% seem to be some high frequency disturbances that may cause some problem for
% the model building 
fprintf('Press spacebar key to continue'),
pause,


clf
sz = spa(srs);
showConfidence(bodeplot(sz), 3);
grid on
%it seems HF disturbance is uncertain. We may do well to limit frequency
%range to 3.2 rad/s (= 10^.5 Hz)

%% Parametric Model for Process Behavior : SS Model
Nx = 1:10;
%I want the model order to be picked based on which Hankel matrix of the 
%ss has the appropriate log singular value
mdlss = ssest(srstest, 2);  

get(mdlss),

 
fprintf('\nPress spacebar key to continue\n'),
pause,


mdlss,
 
fprintf('\nPress spacebar key to continue\n'),
pause,

compare(srstrain, mdlss);  % poor fit 0.2913%
%Fit to estimation data: 35.81% (prediction focus) FPE: 3721, MSE: 3704  
%--> Model is bad

%% ARMAX Model
%I'll try with a 2nd order armax model for the test data and see if I can get
%good dynamics
na=2 ;  nb=2  ; nc=2  ; nk=1; %we know delay is 1 sec
mdlarmax = armax(srstest, [na,  nb ,  nc,   nk], 'InputDelay', 1);
clf
compare(srstrain, mdlarmax)

% ViewSim Results in a sample window
pred_horz = Inf;
compare(srstrain, mdlarmax, pred_horz)%, 'Samples',  0:3000);

%Clearly the high-frequency noise in the output is an issue. Let's try
%decimating the data by a factor of 3
if exist('resample', 'file')==2
    %use resample comand from signal processing toolbox
    srsd = resample(srs, 1, 4, 12);
else
    %use slower alternatiove
    srsd = idresample(srs, 1, 4, 12);
end

[m,n] = size(srsd);
srsdtest = srsd(1:0.6*m);
srsdtrain = srsd(1:0.4*m);

% Trying to find a great structure for decimated data
Imp = impulseest(srsdtest,[],'negative',impulseestOptions('RegulKernel','SE')); 
showConfidence(impulseplot(Imp), 3)
%axis([0 2 -.004 .002])

%again, delay is about 1 samples
% We then try to find an armax structure in the model using pem
mdlarmax2 = armax(srsdtest, [na nb nc nk])

fprintf('\nPress spacebar key to continue\n'),
pause,

compare(srstrain, mdlarmax2)

fprintf('\nPress spacebar key to continue\n'),
pause,

%How about we integrate slow-vaying disturbances in model
mdlarimax2 = armax(srsdtest, [na nb nc nk], 'IntegrateNoise', true)

fprintf('\nPress spacebar key to continue\n'),
pause,

compare(srsdtrain, mdlarimax2)      %obviously not a great result

%Try prediction with n4sid method
Mn4sid = n4sid(srsdtest);  % 1.342% fit.  not impressed
%% ARX Model
%Try with a 2nd order armax model for the test data and see if I can get
%good dynamics
na=4 ;  nb=4  ; nc=2  ; nk=1; %we know delay is 1 sec
mdlarx = arx(srstest, [na,  nb ,   nk]);

clf
compare(srstrain, mdlarx)

% ViewSim Results in a sample window
pred_horz = Inf;
compare(srstrain, mdlarx, pred_horz)%, 'Samples',  0:3000);

%Clearly the high-frequency noise in the output is an issue. Let's try
%decimating the data by a factor of 3
if exist('resample', 'file')==2
    %use resample comand from signal processing toolbox
    srsd = resample(srs, 1, 4, 12);
else
    %use slower alternatiove
    srsd = idresample(srs, 1, 4, 12);
end

[m,n] = size(srsd);
srsdtest = srsd(1:0.6*m);
srsdtrain = srsd(1:0.4*m);

% Trying to find a great structure for decimated data
Imp = impulseest(srsdtest,[],'negative',impulseestOptions('RegulKernel','SE')); 
showConfidence(impulseplot(Imp), 3)
%axis([0 2 -.004 .002])

%again, delay is about 1 samples
% We then try to find an armax structure in the model using pem
mdlarx2 = arx(srsdtest, [na nb nk])

fprintf('\nPress spacebar key to continue\n'),
pause,

compare(srstrain, mdlarmax2)

fprintf('\nPress spacebar key to continue\n'),
pause,

%How about we integrate slow-vaying disturbances in model
mdlarimax2 = armax(srsdtest, [na nb nc nk], 'IntegrateNoise', true)

fprintf('\nPress spacebar key to continue\n'),
pause,

compare(srsdtrain, mdlarimax2)      %obviously not a great result

%Try prediction with n4sid method
Mn4sid = n4sid(srsdtest);  % 1.342% fit.  not impressed
compare(srsdtrain,Mn4sid)

V = arxstruc(srsdtest, srsdtrain,struc(2,2,1:30));
nn = selstruc(V,0)
%%
% ARXSTRUC also suggests a delay of 1 sample which is consistent with the 
% observations from the impulse response. Therefore, we fix the delay to
% the vicinity of 1 and test several different orders with and around this
% delay:
V = arxstruc(srsdtest, srsdtrain,struc(1:5,1:5,nn(1)-1:nn(1)+1));

nn == selstruc(V, 0);  %give me the best model in the structure

mdlarx3 = arx(srsdtest, nn);
V = arxstruc(srsdtest, srsdtrain,struc(2,2,1:30));
nn = selstruc(V,0)

%check residuals
resid(srsdtrain, mdlarx3)
%% OLS Algorithm for theta
p = horzcat(input, output);
%q = [input', output'];

w_1  = p(:,1);
a_12 = sum(p(:,2).* w_1) / sum( w_1.^2);
w_2 = p(:,2) - (a_12 * w_1);

[m, n] = size(input);

g(:,1) = sum(output.* w_1) / sum(w_1.^2);
g(:,2) = sum(output.* w_2) / sum(w_2.^2);

%Now find finite dim theta
theta(:,2) = g(:,2);
theta(:,1) = g(:,1) - (a_12 * theta(:,2) );
